{"pageProps":{"blog":{"authors":[{"image":{"_type":"image","asset":{"_ref":"image-e34a422971d05a7ed927158b762679e4fd178e7c-800x1000-jpg","_type":"reference"}},"links":["https://iterate.no"],"name":"Finn Inderhaug Holme"}],"content":[{"_key":"f1bd04148609","_type":"block","children":[{"_key":"9e59fde39762","_type":"span","marks":[],"text":"Jeg har lyst til 친 vise frem et kult web-api som heter "},{"_key":"69cbb45e215f","_type":"span","marks":["f24bc507fc8f"],"text":"storage event"},{"_key":"c0ceb95697e6","_type":"span","marks":[],"text":". Dette eventet er ganske nifty om man lager en stateful app der det forventes at brukere har mange faner oppe samtidig og 칮nsker 친 bevare state mellom dem. Man lytter p친 storage p친 denne m친ten:"}],"markDefs":[{"_key":"f24bc507fc8f","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event"}],"style":"normal"},{"_key":"8c2ed9a00328","_type":"code","code":" window.addEventListener(\"storage\", (e) => {\n   console.log(\"The storage has changed: \", e)\n })","language":"typescript"},{"_key":"89cd68a01e3f","_type":"block","children":[{"_key":"4f5175aba448","_type":"span","marks":[],"text":"Minner om "},{"_key":"2b7b38f120fb","_type":"span","marks":["d568b8b7f3e6"],"text":"funksjonene"},{"_key":"85b44487c067","_type":"span","marks":[],"text":" "}],"markDefs":[{"_key":"d568b8b7f3e6","_type":"link","href":"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem"}],"style":"normal"},{"_key":"c2935b65f942","_type":"code","code":"//getItem\nwindow.localstorage.getItem(key)\n//setItem\nwindow.localstorage.setItem(key, value)","language":"typescript"},{"_key":"b30a4c4672e3","_type":"block","children":[{"_key":"4f94b504fece","_type":"span","marks":[],"text":"setItem skriver en "},{"_key":"62be5dd05455","_type":"span","marks":["strong"],"text":"tekststreng"},{"_key":"207709f125a4","_type":"span","marks":[],"text":" til localstorage, og getItem henter en "},{"_key":"34c8ed7026bd","_type":"span","marks":["strong"],"text":"tekststreng"},{"_key":"a47419ad76f8","_type":"span","marks":[],"text":". "}],"markDefs":[],"style":"normal"},{"_key":"90f183d1fa38","_type":"block","children":[{"_key":"4115f723134f","_type":"span","marks":[],"text":"Pr칮v gjerne selv i en javascript konsoll n칝r deg:"}],"markDefs":[],"style":"normal"},{"_key":"2a42c9d11a54","_type":"code","code":"// Legg inn todos i localstorage\nwindow.localStorage.setItem(\"todos\", JSON.stringify({ todos: [] }));\n\n// Lag en funksjon som henter todos fra localstorage\nfunction getTodos(){\n  const todos = window.localStorage.getItem(\"todos\");\n  if (todos !== null){\n    return JSON.parse(todos)\n  } else return \"no todolist stored\"\n}\n\n// Kall funksjonen\nconst todos = getTodos();\n// Se p친 resultatet\nconsole.log(\"todos\", todos)","language":"typescript"},{"_key":"75558be67d09","_type":"block","children":[{"_key":"a631e6ee650d","_type":"span","marks":[],"text":"Eksempel med react-query og next"}],"markDefs":[],"style":"h2"},{"_key":"9555b8a66d90","_type":"block","children":[{"_key":"f4c2ff024a64","_type":"span","marks":[],"text":"For 친 vise hvordan dette kan brukes lager jeg en enkel todoliste som er synket over flere tabs. Jeg gj칮r det i react, med "},{"_key":"4a25db180080","_type":"span","marks":["2f0253cd25f6"],"text":"react-query"},{"_key":"0d46e339314d","_type":"span","marks":[],"text":" og "},{"_key":"6239788bac31","_type":"span","marks":["f3fac24fefb5"],"text":"next"},{"_key":"a297813f641f","_type":"span","marks":[],"text":" men storage er et web api og kan brukes hvor som helst. React-query gj칮r det lett 친 invalidere state basert p친 localstorage endringer, ogs친 er det en del som bruker next for tida."}],"markDefs":[{"_key":"2f0253cd25f6","_type":"link","href":"https://tanstack.com/query/v4/docs/react/overview"},{"_key":"f3fac24fefb5","_type":"link","href":"https://nextjs.org/docs/getting-started"}],"style":"normal"},{"_key":"3a282a8c3385","_type":"block","children":[{"_key":"24c5a80a2fc3","_type":"span","marks":[],"text":"F칮rst lager vi en query i en utility fil, f.eks i /queries/todoQuery.ts :"}],"markDefs":[],"style":"normal"},{"_key":"368c77b2cc62","_type":"code","code":"export const useTodos = () => useQuery([\"todos\"], fetchTodos);","language":"typescript"},{"_key":"6c05284a6374","_type":"block","children":[{"_key":"2d0b5cfa74e1","_type":"span","marks":[],"text":"fetchTodos kommer n친 til 친 v칝re en funksjon vi skriver mot localstorage heller enn mot et endepunkt p친 nett. Og den ligner veldig p친 getTodos."}],"markDefs":[],"style":"normal"},{"_key":"d8348c5c0cf4","_type":"code","code":"function fetchTodos(): Promise<Todos>","language":"typescript"},{"_key":"05f581b20228","_type":"block","children":[{"_key":"37e796ab2527","_type":"span","marks":[],"text":"Vi lager typen Todos, vi gir todos en unik id fordi beskrivelser ikke n칮dvendigvis er unike ved 친 gi den en uuid."}],"markDefs":[],"style":"normal"},{"_key":"c46fe562c98e","_type":"code","code":"type Todos = {\n  items: Todo[];\n}\n\ntype Todo = {\n  description: String;\n  done: boolean;\n  id: String;\n}","language":"typescript"},{"_key":"a727093957ab","_type":"code","code":"function fetchTodos(): Promise<Todos>{\n  return new Promise((resolve, reject) => {\n    try {\n      const storageResult = window.localstorage.getItem(\"todos\")\n      if (storageResult !== null){\n        let todos: Todos = JSON.parse(storageResult);\n        resolve(todos)\n      } else {\n        resolve({items: []})\n      }\n    } catch (err) {\n      reject(err)\n    }\n  })\n}","language":"typescript"},{"_key":"86c05620948a","_type":"block","children":[{"_key":"4dad87887251","_type":"span","marks":[],"text":"Merk at storageResult kan se annerledes ut enn vi tror, finnes til og med brukere som g친r inn der og trykker litt 游뗻s친 her an et v칝re greit 친 gj칮re noen sjekker p친 at dataen er p친 formatet man forventer f칮r man kj칮rer resolve."}],"markDefs":[],"style":"normal"},{"_key":"1a5d88331a71","_type":"block","children":[{"_key":"1681bab9ea16","_type":"span","marks":[],"text":"Legg ogs친 merke til at n친r vi ikke finner todos velger vi 친 returnere en tom liste s친nn at vi alltid har todos p친 et kjent format. Senere vil vi ofte heller ha tom liste enn undefined."}],"markDefs":[],"style":"normal"},{"_key":"cb0da0cd914a","_type":"block","children":[{"_key":"f5e1a8316155","_type":"span","marks":[],"text":"Funksjonene for 친 slette/endre/legge f칮lger m칮nsteret med 친 hente ut, lage en kopi av lista, endre, skrive tilbake. Vi bruker queryclient for 친 invalidere queryen v친r s친nn at prosessen vi er i skal oppdateres. Localstorage eventlistener vil s칮rge for at alle andre prosesser f친r en melding senere."}],"markDefs":[],"style":"normal"},{"_key":"6efc15b72713","_type":"code","code":"import { v4 as uuidv4 } from 'uuid';\n\nexport const addItemToTodo = (item: Todo, queryClient: QueryClient) => {\n  const storageResult = window.localStorage.getItem(\"todos\")\n  const newTodo = {\n    ...item,\n    id: uuidv4()\n  }\n  if (storageResult !=null){\n    const oldTodos: Todos = JSON.parse(storageResultult)\n    const newItems = [...oldTodos.items, newTodo]\n    window.localStorage.setItem(\"todos\", JSON.stringify({\n      items: newItems\n    }))\n  } else {\n    window.localStorage.setItem(\"todos\", JSON.stringify({\n      items: [newTodo]\n    }))\n  }\n  queryClient.invalidateQueries([\"todos\"]);\n}","language":"typescript"},{"_key":"7c890c9990a2","_type":"code","code":"export const removeItemFromTodo = (id: String, queryClient: QueryClient) => {\n  const storageResult = window.localStorage.getItem(\"todos\")\n   if (storageResult !=null){\n     const oldTodos: Todos = JSON.parse(storageResult)\n     const newItems = oldtTodos.items.filter(item => {\n       if (item.id != id){\n         return true\n       } else {\n         return false\n       }\n     })\n     window.localStorage.setItem(\"todos\", JSON.stringify({items: newItems}))\n   } else {\n     // We should not have the ability to remove from an empty list so here we can throw an error of our own choosing\n     return\n   }\n   queryClient.invalidateQueries([\"todos\"]);\n}","language":"typescript"},{"_key":"c743da525366","_type":"code","code":"export const toggleTodo = (id: String, queryClient: QueryClient) => {\n  const storageResult = window.localStorage.getItem(\"todos\")\n   if (storageResult !=null){\n     const oldTodos: Todos = JSON.parse(storageResult)\n     const changeIndex = oldTodos.items.findIndex(item => item.id == id)\n     const newItems = [\n       ...oldTodos.items.splice(0, cangeIndex - 1),\n       {\n         ...oldTodos.items[changeIndex], \n         done: !oldTodos.items[changeIndex].done\n       }\n       ...oldTodos.items.splice(changeIndex)\n       ]\n     window.localStorage.setItem(\"todos\", JSON.stringify({items: newItems}))\n   } else {\n     // We should not have the ability to set done from an empty list so here we can throw an error our own choosing\n     return\n   }\n  queryClient.invalidateQueries([\"todos\"]);\n}","language":"typescript"},{"_key":"b20b3b9b6894","_type":"block","children":[{"_key":"2ff4b02c3f79","_type":"span","marks":[],"text":"Til slutt m친 vi invalidere queryen v친r n친r localstorage endres. Nextjs skiller mellom _document og _app.  Vi trenger en "},{"_key":"75bd2395b49f","_type":"span","marks":["727ae57ca5ab"],"text":"custom app"},{"_key":"fda1f989fbdd","_type":"span","marks":[],"text":" "}],"markDefs":[{"_key":"727ae57ca5ab","_type":"link","href":"https://nextjs.org/docs/advanced-features/custom-app"}],"style":"normal"},{"_key":"0b10268d9cbe","_type":"code","code":"// _app.tsx\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\n\nconst MyApp = ({ Component, pageProps }) => {\n  const [queryClient] = useState(() => new QueryClient());\n  // window er undefined p친 serverside\n  if (typeof window !== \"undefined\") {\n    window.addEventListener(\"storage\", () => {\n      const todos = JSON.parse(window.localStorage.getItem(\"todos\"));\n      if (todos !== null) {\n        queryClient.invalidateQueries(\"todos\");\n      }\n    });\n  }\n  \n return (\n    <QueryClientProvider client={queryClient}>\n      <Component {...pageProps} />\n    </QueryClientProvider>\n   ) \n}","language":"typescript"},{"_key":"4d49f4430923","_type":"block","children":[{"_key":"32d6e36c1e04","_type":"span","marks":[],"text":"Alt som gjenst친r n친 er 친 bruke queryen v친r"}],"markDefs":[],"style":"normal"},{"_key":"01a09a625fcb","_type":"code","code":"// file: todo.tsx\nimport {useState} from \"react\"\nimport {\n  addItemToTodo,\n  removeItemFromTodo,\n  toggleTodo,\n  useTodos,\n} from \"todoQuery\"\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport default function TodoComponent(){\n  const todos = useTodos()\n  const [addTodo, setAddTodo] = useState<String>(\"\")\n   const queryClient = useQueryClient();\n  if (todos.isSuccess){\n    <>\n    <h1>MY TODOS</h1>\n    <input type=\"text\" value={addTodo} onChange={(e) => {\n      setAddTodo(e.target.value)\n    }} />\n    <button onClick={() => {\n      addItemToTodo(\n        {\n          description: addTodo,\n          done: false\n        }, queryClient)\n    }}>Add the todo</button>\n    <ul>\n      todos.data.items.map(todo => {\n        <li>\n          {todo.description}{\" \"}\n          {todo.done ? \"done\": \"not done\"}\n          <button onClick={() => {\n            toggleTodo(todo.id, queryClient)\n          }}>toggle todo</button>\n          <buttononClick={() => {\n            removeItemFromTodo(todo.id, queryClient)\n          }}>remove todo </button>\n        </li>\n      })\n    </ul>\n    </>\n  } else {\n    <h1>Laster inn ...</h1>\n  }\n}","language":"typescript"},{"_key":"482257bf6030","_type":"block","children":[{"_key":"ebb692ea0974","_type":"span","marks":[],"text":"Queryen fungerer n친 p친 tvers av faner!!!"}],"markDefs":[],"style":"normal"}],"cudoz":[{"image":{"_type":"image","asset":{"_ref":"image-0ecb68d017f70ab26cde2f8642dfd8072944ab10-516x518-png","_type":"reference"}},"links":["https://no.linkedin.com/in/carlo-morte-92a687131"],"name":"Carlo Morte"}],"ikiId":"a39fc5cc-77a4-4756-8674-a69f3ed733db","slug":"localevent","tittel":"Localstorage eventlistener"}},"__N_SSG":true}